// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "Session" (
    "task_id",
    "name",
    "description",
    "goal",
    "location",
    "startTime",
    "duration"
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, task_id, name, description, goal, location, attended, "startTime", duration, "createdAt"
`

type CreateSessionParams struct {
	TaskID      int64          `json:"task_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Goal        sql.NullString `json:"goal"`
	Location    sql.NullString `json:"location"`
	StartTime   time.Time      `json:"startTime"`
	Duration    int32          `json:"duration"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.TaskID,
		arg.Name,
		arg.Description,
		arg.Goal,
		arg.Location,
		arg.StartTime,
		arg.Duration,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.Goal,
		&i.Location,
		&i.Attended,
		&i.StartTime,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "Session"
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getAllSessions = `-- name: GetAllSessions :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S
WHERE S.learner = $1
LIMIT $2
OFFSET $3
`

type GetAllSessionsParams struct {
	Learner string `json:"learner"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetAllSessions(ctx context.Context, arg GetAllSessionsParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessions, arg.Learner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSessionsBySkill = `-- name: GetAllSessionsBySkill :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S
WHERE S.learner = $1 AND S.id = $2
LIMIT $3
OFFSET $4
`

type GetAllSessionsBySkillParams struct {
	Learner string `json:"learner"`
	ID      int64  `json:"id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetAllSessionsBySkill(ctx context.Context, arg GetAllSessionsBySkillParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionsBySkill,
		arg.Learner,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSessionsByTask = `-- name: GetAllSessionsByTask :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S, "Task" as T
WHERE S.learner = $1 AND T.id = $2
LIMIT $3
OFFSET $4
`

type GetAllSessionsByTaskParams struct {
	Learner string `json:"learner"`
	ID      int64  `json:"id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetAllSessionsByTask(ctx context.Context, arg GetAllSessionsByTaskParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionsByTask,
		arg.Learner,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, task_id, name, description, goal, location, attended, "startTime", duration, "createdAt"
FROM "Session"
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.Goal,
		&i.Location,
		&i.Attended,
		&i.StartTime,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const getUpcomingSessions = `-- name: GetUpcomingSessions :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S
WHERE S.learner = $1 AND Se.startTime > now()
LIMIT $2
OFFSET $3
`

type GetUpcomingSessionsParams struct {
	Learner string `json:"learner"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetUpcomingSessions(ctx context.Context, arg GetUpcomingSessionsParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingSessions, arg.Learner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpcomingSessionsBySkill = `-- name: GetUpcomingSessionsBySkill :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S
WHERE S.learner = $1 AND S.id = $2 AND Se.startTime > now()
LIMIT $3
OFFSET $4
`

type GetUpcomingSessionsBySkillParams struct {
	Learner string `json:"learner"`
	ID      int64  `json:"id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetUpcomingSessionsBySkill(ctx context.Context, arg GetUpcomingSessionsBySkillParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingSessionsBySkill,
		arg.Learner,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpcomingSessionsByTask = `-- name: GetUpcomingSessionsByTask :many
SELECT se.id, se.task_id, se.name, se.description, se.goal, se.location, se.attended, se."startTime", se.duration, se."createdAt"
FROM "Session" AS Se, "Skill" AS S, "Task" as T
WHERE S.learner = $1 AND T.id = $2 AND Se.startTime > now()
LIMIT $3
OFFSET $4
`

type GetUpcomingSessionsByTaskParams struct {
	Learner string `json:"learner"`
	ID      int64  `json:"id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetUpcomingSessionsByTask(ctx context.Context, arg GetUpcomingSessionsByTaskParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getUpcomingSessionsByTask,
		arg.Learner,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Name,
			&i.Description,
			&i.Goal,
			&i.Location,
			&i.Attended,
			&i.StartTime,
			&i.Duration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE "Session"
SET "task_id" = CASE
                 WHEN $1::boolean = TRUE THEN $2
    ELSE "taskID"
END,
"name" = CASE
                 WHEN $3::boolean = TRUE THEN $4
    ELSE "name"
END,
"description" = CASE
                 WHEN $5::boolean = TRUE THEN $6
    ELSE "description"
END,
"goal" = CASE
                 WHEN $7::boolean = TRUE THEN $8
    ELSE "goal"
END,
"location" = CASE
                 WHEN $9::boolean = TRUE THEN $10
    ELSE "location"
END,
"attended" = CASE
                 WHEN $11::boolean = TRUE THEN $12
    ELSE "attended"
END,
"startTime" = CASE
                 WHEN $13::boolean = TRUE THEN $14
    ELSE "startTime"
END,
"duration" = CASE
                 WHEN $15::boolean = TRUE THEN $16
    ELSE "duration"
END
WHERE id = $17
RETURNING id, task_id, name, description, goal, location, attended, "startTime", duration, "createdAt"
`

type UpdateSessionParams struct {
	Toupdatetaskid      bool           `json:"toupdatetaskid"`
	Updatedtaskid       int64          `json:"updatedtaskid"`
	Toupdatename        bool           `json:"toupdatename"`
	Updatedname         string         `json:"updatedname"`
	Toupdatedescription bool           `json:"toupdatedescription"`
	Updateddescription  sql.NullString `json:"updateddescription"`
	Toupdategoal        bool           `json:"toupdategoal"`
	Updatedgoal         sql.NullString `json:"updatedgoal"`
	Toupdatelocation    bool           `json:"toupdatelocation"`
	Updatedlocation     sql.NullString `json:"updatedlocation"`
	Toupdateattended    bool           `json:"toupdateattended"`
	Updatedattended     bool           `json:"updatedattended"`
	Toupdatestarttime   bool           `json:"toupdatestarttime"`
	Updatedstarttime    time.Time      `json:"updatedstarttime"`
	Toupdateduration    bool           `json:"toupdateduration"`
	Updatedduration     int32          `json:"updatedduration"`
	Sessionid           int64          `json:"sessionid"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.Toupdatetaskid,
		arg.Updatedtaskid,
		arg.Toupdatename,
		arg.Updatedname,
		arg.Toupdatedescription,
		arg.Updateddescription,
		arg.Toupdategoal,
		arg.Updatedgoal,
		arg.Toupdatelocation,
		arg.Updatedlocation,
		arg.Toupdateattended,
		arg.Updatedattended,
		arg.Toupdatestarttime,
		arg.Updatedstarttime,
		arg.Toupdateduration,
		arg.Updatedduration,
		arg.Sessionid,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Name,
		&i.Description,
		&i.Goal,
		&i.Location,
		&i.Attended,
		&i.StartTime,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}
