// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: skill.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO "Skill" ("learner", "name")
VALUES ($1, $2)
RETURNING id, learner, name, score, "createdAt"
`

type CreateSkillParams struct {
	Learner string `json:"learner"`
	Name    string `json:"name"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, arg.Learner, arg.Name)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Learner,
		&i.Name,
		&i.Score,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSkillByID = `-- name: DeleteSkillByID :exec
DELETE FROM "Skill"
WHERE id=$1
`

func (q *Queries) DeleteSkillByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkillByID, id)
	return err
}

const getAllSkills = `-- name: GetAllSkills :many
SELECT id, learner, name, score, "createdAt"
FROM "Skill"
LIMIT $1
OFFSET $2
`

type GetAllSkillsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSkills(ctx context.Context, arg GetAllSkillsParams) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, getAllSkills, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Learner,
			&i.Name,
			&i.Score,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkillByID = `-- name: GetSkillByID :one
SELECT id, learner, name, score, "createdAt"
FROM "Skill"
WHERE id=$1
`

func (q *Queries) GetSkillByID(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkillByID, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Learner,
		&i.Name,
		&i.Score,
		&i.CreatedAt,
	)
	return i, err
}

const getSkillBySession = `-- name: GetSkillBySession :one
SELECT s.id, s.learner, s.name, s.score, s."createdAt"
FROM "Skill" as s, "Session" AS Se, "Task" as T
WHERE Se.id = $1 AND Se.task_id = t.id AND t.skill_id=s.id
FOR NO KEY UPDATE
`

func (q *Queries) GetSkillBySession(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkillBySession, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Learner,
		&i.Name,
		&i.Score,
		&i.CreatedAt,
	)
	return i, err
}

const getSkillsByLearner = `-- name: GetSkillsByLearner :many
SELECT id, learner, name, score, "createdAt"
FROM "Skill"
WHERE learner=$1
LIMIT $2
OFFSET $3
`

type GetSkillsByLearnerParams struct {
	Learner string `json:"learner"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetSkillsByLearner(ctx context.Context, arg GetSkillsByLearnerParams) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, getSkillsByLearner, arg.Learner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Learner,
			&i.Name,
			&i.Score,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseSkillScore = `-- name: IncreaseSkillScore :one
UPDATE "Skill"
SET "score"="score" + $1
WHERE id = $2
RETURNING id, learner, name, score, "createdAt"
`

type IncreaseSkillScoreParams struct {
	Score int64 `json:"score"`
	ID    int64 `json:"id"`
}

func (q *Queries) IncreaseSkillScore(ctx context.Context, arg IncreaseSkillScoreParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, increaseSkillScore, arg.Score, arg.ID)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Learner,
		&i.Name,
		&i.Score,
		&i.CreatedAt,
	)
	return i, err
}
