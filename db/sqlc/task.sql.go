// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: task.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "Task" ("name", "skill_id")
VALUES ($1, $2)
RETURNING id, name, skill_id, "createdAt"
`

type CreateTaskParams struct {
	Name    string `json:"name"`
	SkillID int64  `json:"skill_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Name, arg.SkillID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SkillID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM "Task"
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, name, skill_id, "createdAt"
FROM "Task"
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SkillID,
		&i.CreatedAt,
	)
	return i, err
}

const getTasksByLearnerName = `-- name: GetTasksByLearnerName :many
SELECT t.id, t.name, t.skill_id, t."createdAt"
FROM "Task" AS t, "Skill" AS s
WHERE s.learner= $1 AND s.id= t.skill_id
LIMIT $2
OFFSET $3
`

type GetTasksByLearnerNameParams struct {
	Learner string `json:"learner"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetTasksByLearnerName(ctx context.Context, arg GetTasksByLearnerNameParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByLearnerName, arg.Learner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SkillID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksBySkillID = `-- name: GetTasksBySkillID :many
SELECT id, name, skill_id, "createdAt"
FROM "Task"
WHERE skill_id=$1
LIMIT $2
OFFSET $3
`

type GetTasksBySkillIDParams struct {
	SkillID int64 `json:"skill_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetTasksBySkillID(ctx context.Context, arg GetTasksBySkillIDParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksBySkillID, arg.SkillID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SkillID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE "Task"
SET "name" = CASE
    WHEN $1::boolean = TRUE THEN $2
    ELSE "name"
    END,
    "skill_id" = CASE
        WHEN $3::boolean = TRUE THEN $4
        ELSE "skill_id"
    END
WHERE id = $5
RETURNING id, name, skill_id, "createdAt"
`

type UpdateTaskParams struct {
	Toupdatename    bool   `json:"toupdatename"`
	Updatedname     string `json:"updatedname"`
	Toupdateskillid bool   `json:"toupdateskillid"`
	Updatedskillid  int64  `json:"updatedskillid"`
	Taskid          int64  `json:"taskid"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Toupdatename,
		arg.Updatedname,
		arg.Toupdateskillid,
		arg.Updatedskillid,
		arg.Taskid,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SkillID,
		&i.CreatedAt,
	)
	return i, err
}
